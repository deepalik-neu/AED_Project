/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ui.PathologistRole;

import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Organization.PathologistOrganization;
import Business.Person.Donor;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.LabTestWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.Date;
import javax.swing.BorderFactory;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class PathologistWorkRequestJPanel extends javax.swing.JPanel {

    JPanel userProcessContainer;
    LabTestWorkRequest request;
    private EcoSystem system;
    private UserAccount userAccount;
    private PathologistOrganization pathoorganization;
    private Enterprise enterprise;
    private Network network;
    private Enterprise enterprise1;
    private Organization organ;
    private DB4OUtil dB4OUtil = DB4OUtil.getInstance();
    /**
     * Creates new form ProcessWorkRequestJPanel
     */
    public PathologistWorkRequestJPanel(EcoSystem system, UserAccount userAccount, PathologistOrganization pathoorganization, Enterprise enterprise, Network network) {
    
          initComponents();
        this.userProcessContainer = userProcessContainer;
        this.request = request;
        this.pathoorganization = pathoorganization;
        this.enterprise = enterprise;
        this.system = system;
        this.userAccount = userAccount;
        this.network = network;
        
        populateOrganizationDonorTable();
        populatePathologistDonorTable();
       
    }

     public void populateOrganizationDonorTable(){
        DefaultTableModel model = (DefaultTableModel)tableDonor.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : pathoorganization.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getSummary();
            row[2] = request.getDonor();
            row[3] = request.getDonor().getName();
            row[4] = request.getDonor().getContact();
            row[5] = request.getStatus();
            
            model.addRow(row);
        }
    }
     
      public void populatePathologistDonorTable(){
        DefaultTableModel model = (DefaultTableModel)tablePathologistDonors.getModel();
        
        model.setRowCount(0);
        
        for(WorkRequest request : userAccount.getWorkQueue().getWorkRequestList()){
            Object[] row = new Object[6];
            row[0] = request;
            row[1] = request.getDonor();
            row[2] = request.getDonor().getName();
            //row[3] = request.getDonor().getContact();
            row[3] = request.getDonor().getBloodGroup();
            row[4] = request.getUserAccount().getUsername();
            row[5] = request.getStatus();
             
            model.addRow(row);
        }
      }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableDonor = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablePathologistDonors = new javax.swing.JTable();
        btnAssign = new javax.swing.JButton();
        btnProcess = new javax.swing.JButton();
        donate = new javax.swing.JButton();
        add = new javax.swing.JButton();
        discard = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setForeground(new java.awt.Color(102, 0, 0));

        tableDonor.setBackground(new java.awt.Color(255, 204, 204));
        tableDonor.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        tableDonor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableDonor);

        jScrollPane2.setForeground(new java.awt.Color(102, 0, 0));

        tablePathologistDonors.setBackground(new java.awt.Color(255, 204, 204));
        tablePathologistDonors.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        tablePathologistDonors.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablePathologistDonors);

        btnAssign.setBackground(new java.awt.Color(255, 204, 204));
        btnAssign.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        btnAssign.setForeground(new java.awt.Color(102, 0, 0));
        btnAssign.setText("Assign to me");
        btnAssign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignActionPerformed(evt);
            }
        });

        btnProcess.setBackground(new java.awt.Color(255, 204, 204));
        btnProcess.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        btnProcess.setForeground(new java.awt.Color(102, 0, 0));
        btnProcess.setText("Process Request");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        donate.setBackground(new java.awt.Color(255, 204, 204));
        donate.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        donate.setForeground(new java.awt.Color(102, 0, 0));
        donate.setText("Plasma Donated by Donor");
        donate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donateActionPerformed(evt);
            }
        });

        add.setBackground(new java.awt.Color(255, 204, 204));
        add.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        add.setForeground(new java.awt.Color(102, 0, 0));
        add.setText("Add Plasma to Bank");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        discard.setBackground(new java.awt.Color(255, 204, 204));
        discard.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        discard.setForeground(new java.awt.Color(102, 0, 0));
        discard.setText("Discard Plasma ");
        discard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discardActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Kefa", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setText("Pathologist Organization");

        jButton1.setBackground(new java.awt.Color(255, 204, 204));
        jButton1.setFont(new java.awt.Font("Kefa", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(102, 0, 0));
        jButton1.setText("<<Back");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(356, 356, 356)
                            .addComponent(btnAssign, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addContainerGap()
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(297, 297, 297)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 349, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(337, 337, 337)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(donate, javax.swing.GroupLayout.PREFERRED_SIZE, 265, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(discard, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {add, btnProcess, discard, donate});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnAssign)
                .addGap(28, 28, 28)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(donate, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(add, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(discard, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(83, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(57, 57, 57))))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add, btnAssign, btnProcess, discard, donate});

    }// </editor-fold>//GEN-END:initComponents

    private void btnAssignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = tableDonor.getSelectedRow();
        
        if (selectedRow < 0){
         
         JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Please select<font color='red'> a row</font> from the<font color='green'> table</I></font></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            
            return;
        }
        
        else{
        WorkRequest request = (WorkRequest)tableDonor.getValueAt(selectedRow, 0);
        //request.setReceiver(userAccount);
        
        if(request.getStatus().equals("Assigned to Hospital"))
        { 
        request.setStatus("Assigned to Pathologist" + userAccount.getUsername());
        request.setUserAccount(userAccount);
        userAccount.getWorkQueue().getWorkRequestList().add(request);
        }
        else{
            
        JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Work Request is<font color='red'> already</font> in progress!</I></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
                
        //JOptionPane.showMessageDialog(null, "Work Request is already assigned!" );
        }
        
        dB4OUtil.storeSystem(system);
        
        
        populateOrganizationDonorTable();
        populatePathologistDonorTable();
        }
    }//GEN-LAST:event_btnAssignActionPerformed

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = tablePathologistDonors.getSelectedRow();
        
        if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Please select<font color='red'> a row</font> from the<font color='green'> table</I></font></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            
           // JOptionPane.showMessageDialog(null, "Please select a row first!" );
            return;
        }
        else
        {               
        WorkRequest request = (WorkRequest)tablePathologistDonors.getValueAt(selectedRow, 0);
       System.out.println("status"+request.getStatus());
        if(request.getStatus().contains("Assigned to Pathologist")){
//       textRequest.setText( String.valueOf(tblOrganisationDonors.getValueAt(selectedRow, 0)));  
//       checkBP.setEnabled(true);
//       checkTest.setEnabled(true);
//       checkPulse.setEnabled(true);
//       buttonPlasmaDonated.setEnabled(true);
        }
        else{
            
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Work Request is<font color='red'> already</font> in progress!</I></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
                
            //JOptionPane.showMessageDialog(null, "Request is already processed!" );
        }
        }
        dB4OUtil.storeSystem(system);
    }//GEN-LAST:event_btnProcessActionPerformed

    private void donateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donateActionPerformed
        // TODO add your handling code here:
        int selectedRow = tablePathologistDonors.getSelectedRow();
        
        
//        if (!checkBP.isSelected()) {
//            checkBP.setBorder(BorderFactory.createLineBorder(Color.RED));
//            checkBP.setForeground(Color.red);
//        }
//         if (!checkTest.isSelected()) {
//            checkTest.setBorder(BorderFactory.createLineBorder(Color.RED));
//            checkTest.setForeground(Color.red);
//        }
//         if (!checkPulse.isSelected()) {
//            checkPulse.setBorder(BorderFactory.createLineBorder(Color.RED));
//            checkPulse.setForeground(Color.red);
//        }
        
        
        
        if (selectedRow < 0){
            
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Please select<font color='red'> a Request Number</font> from the<font color='green'> table</I></font></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
           
           //JOptionPane.showMessageDialog(null, "Please select a row first!" );
            return;
        }
        
//        else if( !checkBP.isSelected()  || !checkTest.isSelected()  ||  !checkPulse.isSelected())
//        {   JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Kindly do the<font color='red'> Health Check of the Donor</font> before the<font color='green'> Plasma Donation</I></font></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
//           
//            //JOptionPane.showMessageDialog(null, "Kindly do the Heatlth Check of the Donor before the Donation!" , "Error", JOptionPane.ERROR_MESSAGE);
//        }
        
        else{
        WorkRequest request1 = (WorkRequest)tableDonor.getValueAt(selectedRow, 0);
                request1.setStatus("Plasma Donated");
                
                //request1.getDonor().setStatus("Plasma Donated");
                dB4OUtil.storeSystem(system);
                
                populateOrganizationDonorTable();
                populatePathologistDonorTable();
                
                JOptionPane.showMessageDialog(null, new JLabel("<html><h2><font color='green'><I>Plasma Donated!</I></font></h2></html>"));
           
        for(Donor dnr: system.getDonorDirectory().getDonorList()){
            //if(dnr.getDonorId().equals(request1.getDonor().getDonorId())){
            if(dnr.getName().equals(request1.getDonor().getName())){
            //    dnr.setLastDonationDate(new Date());
                dnr.setStatus("Plasma Donated");
               // System.out.println(String.valueOf(dnr.getLastDonationDate())+" last donation date");
            }
        }
//        buttonPlasmaDonated.setEnabled(false);
//        bloodGroupJComboBox.setEnabled(true);
//        buttonAddPlasma.setEnabled(true);
//        buttonPlasmaDiscard.setEnabled(true);
//        checkPlasma.setEnabled(true);
//        
//        jLabel7.setVisible(true);
        
        }
        dB4OUtil.storeSystem(system);
        
    }//GEN-LAST:event_donateActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
        // TODO add your handling code here:
        
//         if(!checkPlasma.isSelected()){
//            checkPlasma.setBorder(BorderFactory.createLineBorder(Color.RED));
//            checkPlasma.setForeground(Color.red);
//           // JOptionPane.showMessageDialog(null, "Kindly Test for other Infections!", "Error", JOptionPane.ERROR_MESSAGE);
//            JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Kindly do the<font color='red'> Test</font> for other infections!</I></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
//           
//        }
//        else if(bloodGroupJComboBox.getSelectedItem().equals(null)){
//            bloodGroupJComboBox.setBorder(BorderFactory.createLineBorder(Color.RED));
//            bloodGroupJComboBox.setForeground(Color.red);
//           // JOptionPane.showMessageDialog(null, "Kindly select a Blood Group!", "Error", JOptionPane.ERROR_MESSAGE);
//            JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Kindly select a<font color='red'> Blood Group!</font><I></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
//           
//        }
//        else{
        for(Enterprise ent : network.getEnterpriseDirectory().getEnterpriseList()){
              if(ent.getEnterpriseType().toString().equals("PlasmaBank")){
                  enterprise1 = ent;           
              }
        }  
        for (Organization org: enterprise1.getOrganizationDirectory().getOrganizationList()){
              System.out.println(org.getClass().getTypeName().toString()+" asit");
              if(org.getClass().getTypeName().toString().equals("Business.Organization.PlasmaBankOrganization")){
                 organ =org;
              }
        }
          
//        try
//          {organ.getBloodGroup().addBloodGroup(String.valueOf(bloodGroupJComboBox.getSelectedItem()));
//          }
//        catch( NullPointerException ex   )
//          { System.out.println("");
//          }
                    
        int selectedRow = tablePathologistDonors.getSelectedRow();
        
        if (selectedRow < 0){
            JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Kindly select a<font color='red'> row!</font><I></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
          
        WorkRequest request = (WorkRequest)tablePathologistDonors.getValueAt(selectedRow, 0);
                request.setStatus("Plasma added to Bank");
                
                dB4OUtil.storeSystem(system);
                
                populateOrganizationDonorTable();
                populatePathologistDonorTable();
            
                JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Plasma<font color='green'> added</font> to the bank!<I></h2></html>"));
           
                
//                buttonAddPlasma.setEnabled(false);
//                buttonPlasmaDiscard.setEnabled(false);        
         //}
         dB4OUtil.storeSystem(system);
         
    }//GEN-LAST:event_addActionPerformed

    private void discardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discardActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tablePathologistDonors.getSelectedRow();
        if (selectedRow < 0){
             JOptionPane.showMessageDialog(null, new JLabel(  "<html><h2><I>Please select<font color='red'> a row</font> from the<font color='green'> table</I></font></h2></html>"), "Warning", JOptionPane.WARNING_MESSAGE);
            //JOptionPane.showMessageDialog(null, "Please select a row first!" );
            return;
        }
        else
        {  
        WorkRequest request = (WorkRequest)tablePathologistDonors.getValueAt(selectedRow, 0);
                request.setStatus("Plasma Discarded");
                populateOrganizationDonorTable();
                populatePathologistDonorTable();
                JOptionPane.showMessageDialog(null, new JLabel("<html><h2><font color='red'><I>Plasma Discarded!</I></font></h2></html>"));  
        
//        buttonAddPlasma.setEnabled(false);
//        buttonPlasmaDiscard.setEnabled(false);
        
        dB4OUtil.storeSystem(system);
        }
    }//GEN-LAST:event_discardActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton btnAssign;
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton discard;
    private javax.swing.JButton donate;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableDonor;
    private javax.swing.JTable tablePathologistDonors;
    // End of variables declaration//GEN-END:variables
}
